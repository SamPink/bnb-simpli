import { useState, useEffect } from "react";
import { ChatMessage } from "@/components/ChatMessage";
import { ChatInput } from "@/components/ChatInput";
import { ChatSidebar } from "@/components/ChatSidebar";
import { TypingIndicator } from "@/components/TypingIndicator";
import { Button } from "@/components/ui/button";
import { LogOut } from "lucide-react";
import { supabase } from "@/integrations/supabase/client";
import { useNavigate } from "react-router-dom";
import { getChatHistory } from "@/services/chatService";
import { useToast } from "@/hooks/use-toast";

interface Source {
  document: string;
  page: number;
  paragraph: number;
  text: string;
  metadata: {
    size: number;
    last_modified: string;
    file_type: string;
  };
}

interface Message {
  content: string;
  isUser: boolean;
  sources?: Source[];
  userId?: string;
  runId?: string;
  pdfPath?: string | null;
  sessionId?: string;
  messageId?: string;
  previousMessage?: string;
}

const Index = () => {
  const navigate = useNavigate();
  const { toast } = useToast();
  const [messages, setMessages] = useState<Message[]>([
    { 
      content: "This demo version provides an early showcase of the Brown & Brown Support Desk Agent. Please note the following:\n\n" +
               "• You can ask questions regarding Acturis user guides.\n" +
               "• View the responses generated by the AI agent.\n" +
               "• A file download feature is available for PDF documents containing the source of information.\n\n" +
               "Important: In this demo, some functionalities are disabled.", 
      isUser: false,
      messageId: 'welcome-message',
      sessionId: 'welcome'
    },
  ]);
  const [userId, setUserId] = useState<string | null>(null);
  const [currentSessionId, setCurrentSessionId] = useState<string>(crypto.randomUUID());
  const [isTyping, setIsTyping] = useState(false);

  console.log('Current session ID:', currentSessionId);

  useEffect(() => {
    supabase.auth.getUser().then(({ data: { user } }) => {
      if (user) {
        console.log('User authenticated:', user.id);
        setUserId(user.id);
      }
    });
  }, []);

  const handleChatSelect = async (sessionId?: string) => {
    if (!userId) return;
    
    if (!sessionId) {
      // Starting a new conversation
      const newSessionId = crypto.randomUUID();
      console.log('Starting new conversation with session ID:', newSessionId);
      setCurrentSessionId(newSessionId);
      setMessages([messages[0]]); // Keep welcome message only
      return;
    }
    
    console.log('Loading chat history for session:', sessionId);
    setCurrentSessionId(sessionId);
    
    try {
      const history = await getChatHistory(sessionId, userId);
      console.log('Received chat history:', history);
      
      const formattedMessages: Message[] = history.map((msg, index) => ({
        content: msg.content,
        isUser: msg.role === 'user',
        sources: msg.sources,
        userId: userId,
        runId: sessionId,
        pdfPath: msg.pdf_path || null,
        sessionId: sessionId,
        messageId: `${sessionId}-${index}`,
        previousMessage: index > 0 ? history[index - 1].content : undefined
      }));
      
      setMessages([messages[0], ...formattedMessages]);
    } catch (error) {
      console.error('Error loading chat history:', error);
      toast({
        title: "Error",
        description: "Failed to load chat history",
        variant: "destructive",
      });
    }
  };

  const handleUserMessage = (userMessage: string) => {
    if (!userId) return;
    
    const messageId = `${currentSessionId}-${Date.now()}-user`;
    console.log('Adding user message:', { messageId, sessionId: currentSessionId });
    
    setMessages(prev => [...prev, { 
      content: userMessage, 
      isUser: true,
      messageId,
      sessionId: currentSessionId,
      userId
    }]);
  };

  const handleAIResponse = (
    apiResponse: string, 
    sources: Source[] = [], 
    runId: string, 
    pdfPath: string | null = null
  ) => {
    if (!userId) return;
    
    const messageId = `${currentSessionId}-${Date.now()}-ai`;
    const previousMessage = messages[messages.length - 1]?.content;
    
    console.log('Adding AI response:', { 
      messageId, 
      sessionId: currentSessionId,
      hasPreviousMessage: !!previousMessage 
    });
    
    setMessages(prev => [
      ...prev,
      { 
        content: apiResponse, 
        isUser: false, 
        sources, 
        userId, 
        runId,
        pdfPath,
        sessionId: currentSessionId,
        messageId,
        previousMessage
      }
    ]);
  };

  const handleLogout = async () => {
    await supabase.auth.signOut();
    navigate("/login");
  };

  return (
    <div className="flex h-screen bg-background">
      <ChatSidebar 
        onChatSelect={handleChatSelect}
        selectedChat={currentSessionId}
      />
      
      <div className="flex-1 flex flex-col">
        <header className="flex justify-between items-center p-4 border-b border-border bg-card">
          <h1 className="text-2xl font-semibold">Brown & Brown Support Desk Agent</h1>
          <Button 
            variant="ghost" 
            size="sm" 
            className="text-destructive gap-2"
            onClick={handleLogout}
          >
            <LogOut className="h-4 w-4" />
            Log out
          </Button>
        </header>
        
        <div className="flex-1 overflow-y-auto p-6 space-y-6">
          {messages.map((message, index) => (
            <ChatMessage 
              key={message.messageId || index}
              {...message}
              userId={userId || undefined}
              previousMessage={index > 0 ? messages[index - 1].content : undefined}
            />
          ))}
          {isTyping && <TypingIndicator />}
        </div>
        
        <ChatInput 
          onSendMessage={handleUserMessage}
          onResponse={handleAIResponse}
          setIsTyping={setIsTyping}
        />
      </div>
    </div>
  );
};

export default Index;